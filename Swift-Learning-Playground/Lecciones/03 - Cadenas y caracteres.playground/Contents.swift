import Foundation

// Traducci√≥n de la documentaci√≥n oficial:
// ***************************************

// Cadenas y caracteres:
// --------------------
/*
 Una cadena es una serie de caracteres, como "hola, mundo" o "albatros". Las cadenas r√°pidas est√°n representadas por el tipo de cadena. Se puede acceder al contenido de una cadena de varias maneras, incluso como una colecci√≥n de valores de caracteres.

 Los tipos de cadenas y caracteres de Swift proporcionan una forma r√°pida y compatible con Unicode de trabajar con texto en su c√≥digo. La sintaxis para la creaci√≥n y manipulaci√≥n de cadenas es ligera y legible, con una sintaxis literal de cadena que es similar a C. La concatenaci√≥n de cadenas es tan simple como combinar dos cadenas con el operador +, y la mutabilidad de cadenas se gestiona eligiendo entre una constante o una variable, al igual que cualquier otro valor en Swift. Tambi√©n puede usar cadenas para insertar constantes, variables, literales y expresiones en cadenas m√°s largas, en un proceso conocido como interpolaci√≥n de cadenas. Esto facilita la creaci√≥n de valores de cadena personalizados para la visualizaci√≥n, el almacenamiento y la impresi√≥n.

 A pesar de esta simplicidad de sintaxis, el tipo de cadena de Swift es una implementaci√≥n de cadena r√°pida y moderna. Cada cadena est√° compuesta por caracteres Unicode independientes de la codificaci√≥n, y proporciona soporte para acceder a esos caracteres en varias representaciones Unicode.
 */


//*********************************************************************//
// Ntotas:                                                             //
//*********************************************************************//
// El tipo String de Swift se une con la clase NSString de Foundation. //
// Foundation tambi√©n extiende String para exponer los m√©todos         //
// definidos por NSString. Esto significa que, si importa Foundation,  //
// puede acceder a esos m√©todos NSString en String sin casting.        //
// For more information about using String with Foundation and Cocoa,  //
//  see https://developer.apple.com/documentation/swift/string#2919514 //
//*********************************************************************//


// Literales de cadena:
// -------------------

// Puede incluir valores de cadena predefinidos dentro de su c√≥digo como
// literales de cadena. Una cadena literal es una secuencia de caracteres
// rodeadas de comillas dobles (").

// Use a string literal as an initial value for a constant or variable:

let someString = "Some string literal value"

// Tenga en cuenta que Swift infiere un tipo de cadena para la constante
// someString porque se inicializa con un valor literal de cadena.


// Multiline String Literals:
// --------------------------

// Si necesita una cadena que abarque varias l√≠neas,
// use una cadena literal de varias l√≠neas, una secuencia de caracteres
// rodeada de tres comillas dobles:

let quotation = """
The White Rabbit put on his spectacles.  "Where shall I begin,
please your Majesty?" he asked.

"Begin at the beginning," the King said gravely, "and go on
till you come to the end; then stop."
"""

/*
 Un literal de cadena multil√≠nea incluye todas las l√≠neas entre sus comillas de apertura y cierre. La cadena comienza en la primera l√≠nea despu√©s de las comillas de apertura (""") y termina en la l√≠nea antes de las comillas de cierre, lo que significa que ninguna de las cadenas de abajo comienza o termina con un salto de l√≠nea:
 */

let singleLineString = "These are the same."
let multilineString = """
These are the same.
"""

/*
 Cuando su c√≥digo fuente incluye un salto de l√≠nea dentro de un literal de cadena de varias l√≠neas, ese salto de l√≠nea tambi√©n aparece en el valor de la cadena. Si desea usar saltos de l√≠nea para que su c√≥digo fuente sea m√°s f√°cil de leer, pero no desea que los saltos de l√≠nea sean parte del valor de la cadena, escriba una barra invertida (\) al final de esas l√≠neas:
 */

let softWrappedQuotation = """
The White Rabbit put on his spectacles.  "Where shall I begin, \
please your Majesty?" he asked.

"Begin at the beginning," the King said gravely, "and go on \
till you come to the end; then stop."
"""

/*
 Para hacer una cadena literal de varias l√≠neas que comience o termine con un feed de l√≠nea, escriba una l√≠nea en blanco como primera o √∫ltima l√≠nea. Por ejemplo:
 */

let lineBreaks = """

This string starts with a line break.
It also ends with a line break.

"""

/*
 Una cadena de varias l√≠neas se puede indentar para que coincida con el c√≥digo circundante. El espacio en blanco antes de las comillas de cierre (""") le dice a Swift qu√© espacio en blanco ignorar antes de todas las dem√°s l√≠neas. Sin embargo, si escribe un espacio en blanco al principio de una l√≠nea adem√°s de lo que est√° antes de las comillas de cierre, ese espacio en blanco se incluye.
 */

let linesWithIndentation = """
                     _______
                    |0|0|0|0| Esta l√≠nea no comienza con espacios en blanco.
                     -------
                        |
Espacio ignorado --------
                     _______   _______
                    |0|0|0|0| |O|O|O|O| Esta l√≠nea comienza con cuatro espacios.
                     -------   -------
                                  |
Aparece en cadena ----------------- 
                     _______
                    |0|0|0|0|  Esta l√≠nea no comienza con espacios en blanco.
                     -------
                     -------
                    |0|0|0|0| 
                     -------   """
                
/*
 En el ejemplo anterior, a pesar de que toda la cadena literal de varias l√≠neas est√° indentada, la primera y la √∫ltima l√≠nea de la cadena no comienzan con ning√∫n espacio en blanco. La l√≠nea central tiene m√°s sangr√≠a que las comillas de cierre, por lo que comienza con esa sangr√≠a adicional de cuatro espacios.
 */


// Caracteres especiales en literales de cadena:
// --------------------------------------------

/*
 Los literales de cadena pueden incluir los siguientes caracteres especiales:

 Los caracteres especiales de escape \0 (caracter nulo), \\ (barra invertida), \t (pesta√±a horizontal), \n (alimentaci√≥n de l√≠nea), \r (retorno de carro), \" (comillas dobles) y \' (comillas simples)

 Un valor escalar Unicode arbitrario, escrito como \u{n}, donde n es un n√∫mero hexadecimal de 1 a 8 d√≠gitos (Unicode se discute en Unicode a continuaci√≥n)

 El siguiente c√≥digo muestra cuatro ejemplos de estos caracteres especiales. La constante wiseWords contiene dos comillas dobles escapadas. Las constantes dollarSign, blackHeart y sparklingHeart demuestran el formato escalar Unicode:
 */

let wiseWords = "\"Imagination is more important than knowledge\" - Einstein"
// "Imagination is more important than knowledge" - Einstein
let dollarSign = "\u{24}"        // $,  Unicode scalar U+0024
let blackHeart = "\u{2665}"      // ‚ô•,  Unicode scalar U+2665
let sparklingHeart = "\u{1F496}" // üíñ, Unicode scalar U+1F496

/*
 Debido a que los literales de cadena de varias l√≠neas usan tres comillas dobles en lugar de solo una, puede incluir una comilla doble (") dentro de un literal de cadena de varias l√≠neas sin escapar de ella. Para incluir el texto """ en una cadena de varias l√≠neas, escape al menos una de las comillas. Por ejemplo:
 */

let threeDoubleQuotationMarks = """
Escaping the first quotation mark \"""
Escaping all three quotation marks \"\"\"
"""


// Delimitadores de cadenas extendidas:
// -----------------------------------


/*
 Para crear un valor de cadena vac√≠o como punto de partida para construir una cadena m√°s larga, asigne un literal de cadena vac√≠a a una variable o inicialice una nueva instancia de cadena con la sintaxis del inicializador:
 */

var emptyString = ""               // empty string literal
var anotherEmptyString = String()  // initializer syntax
// these two strings are both empty, and are equivalent to each other

// Averig√ºe si un valor de cadena est√° vac√≠o comprobando su propiedad Boolean isEmpty:

if emptyString.isEmpty {
    print("Nothing to see here")
}
// Prints "Nothing to see here"


// Mutabilidad de la cadena:
// ------------------------

/*
 Usted indica si una cadena en particular se puede modificar (o mutar) asign√°ndola a una variable (en cuyo caso se puede modificar) o a una constante (en cuyo caso no se puede modificar):
 */

var variableString = "Horse"
variableString += " and carriage"
// variableString is now "Horse and carriage"


let constantString = "Highlander"
constantString += " and another Highlander"
// this reports a compile-time error - a constant string cannot be modified


//*********************************************************************//
// Ntotas:                                                             //
//*********************************************************************//
// Este enfoque es diferente de la mutaci√≥n de cadena en Objective-C y //
// Cocoa, donde eliges entre dos clases (NSString y NSMutableString)   //
// para indicar si una cadena puede ser mutada.                        //
//*********************************************************************//

// Las Cadenas Son Tipos De Valores:
// --------------------------------

/*
 El tipo de cadena de Swift es un tipo de valor. Si crea un nuevo valor de cadena, ese valor de cadena se copia cuando se pasa a una funci√≥n o m√©todo, o cuando se asigna a una constante o variable. En cada caso, se crea una nueva copia del valor de cadena existente, y se pasa o asigna la nueva copia, no la versi√≥n original. Los tipos de valor se describen en
 
 https://docs.swift.org/swift-book/documentation/the-swift-programming-language/classesandstructures#Structures-and-Enumerations-Are-Value-Types
 
 El comportamiento de cadena de copia predeterminada de Swift garantiza que cuando una funci√≥n o m√©todo le pasa un valor de cadena, est√° claro que posee ese valor de cadena exacto, independientemente de d√≥nde venga. Puede estar seguro de que la cadena que se le pasa no se modificar√° a menos que la modifique usted mismo.

 Detr√°s de escena, el compilador de Swift optimiza el uso de cadenas para que la copia real tenga lugar solo cuando es absolutamente necesario. Esto significa que siempre obtienes un gran rendimiento cuando trabajas con cadenas como tipos de valor.
 */

// Trabajar con personajes:
// -----------------------

/*
 Puede acceder a los valores de caracteres individuales para una cadena iterando sobre la cadena con un bucle for-in:
 */

for character in "Dog!üê∂" {
    print(character)
}
// D
// o
// g
// !
// üê∂

/*
 El bucle for-in se describe en For-In Loops.

 Alternativamente, puede crear una constante o variable de car√°cter independiente a partir de una cadena literal de un solo car√°cter proporcionando una anotaci√≥n de tipo de car√°cter:
 */

let exclamationMark: Character = "!"

/*
 Los valores de cadena se pueden construir pasando una matriz de valores de caracteres como argumento a su inicializador:
 */

let catCharacters: [Character] = ["C", "a", "t", "!", "üê±"]
let catString = String(catCharacters)
print(catString)
// Prints "Cat!üê±"


// Concatenaci√≥n de cadenas y caracteres:
// -------------------------------------

/*
 Los valores de cadena se pueden sumar (o concatenar) con el operador de adici√≥n (+) para crear un nuevo valor de cadena:
 */

let string1 = "hello"
let string2 = " there"
var welcome = string1 + string2
// welcome now equals "hello there"

/*
 Tambi√©n puede agregar un valor de cadena a una variable de cadena existente con el operador de asignaci√≥n de adici√≥n (+=):
 */

var instruction = "look over"
instruction += string2
// instruction now equals "look over there"


/*
 Puede apuntar un valor de car√°cter a una variable de cadena con el m√©todo append() del tipo de cadena:
 */


let exclamationMark: Character = "!"
welcome.append(exclamationMark)
// welcome now equals "hello there!"

//*********************************************************************//
// Ntotas:                                                             //
//*********************************************************************//
//                                                                     //
// No puede apundar una cadena o un car√°cter a una variable de         //
// car√°cter existente, porque un valor de car√°cter debe contener solo  //
// un car√°cter.                                                        //
//*********************************************************************//

/*
 Si est√° utilizando literales de cadena de varias l√≠neas para construir las l√≠neas de una cadena m√°s larga, desea que cada l√≠nea de la cadena termine con un salto de l√≠nea, incluida la √∫ltima l√≠nea. Por ejemplo:
 */


let badStart = """
    one
    two
    """
let end = """
    three
    """
print(badStart + end)
// Prints two lines:
// one
// twothree


let goodStart = """
    one
    two

    """
print(goodStart + end)
// Prints three lines:
// one
// two
// three


/*
 En el c√≥digo anterior, concatenar badStart con end produce una cadena de dos l√≠neas, que no es el resultado deseado. Debido a que la √∫ltima l√≠nea de badStart no termina con un salto de l√≠nea, esa l√≠nea se combina con la primera l√≠nea de final. Por el contrario, ambas l√≠neas de goodStart terminan con un salto de l√≠nea, por lo que cuando se combina con end, el resultado tiene tres l√≠neas, como se esperaba.

 Interpolaci√≥n de cadenas:
 ------------------------
 
 La interpolaci√≥n de cadenas es una forma de construir un nuevo valor de cadena a partir de una mezcla de constantes, variables, literales y expresiones incluyendo sus valores dentro de un literal de cadena. Puede usar la interpolaci√≥n de cadenas en literales de cadena de una sola l√≠nea y de varias l√≠neas. Cada elemento que insertas en el literal de la cadena est√° envuelto en un par de par√©ntesis, precedido por una barra invertida (\):
 */

let multiplier = 3
let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"
// message is "3 times 2.5 is 7.5"


/*
 En el ejemplo anterior, el valor del multiplicador se inserta en un literal de cadena como \(multiplicador). Este marcador de posici√≥n se reemplaza con el valor real del multiplicador cuando se eval√∫a la interpolaci√≥n de cadenas para crear una cadena real.

 El valor del multiplicador tambi√©n es parte de una expresi√≥n m√°s grande m√°s adelante en la cadena. Esta expresi√≥n calcula el valor de Double(multiplicador) * 2.5 e inserta el resultado (7.5) en la cadena. En este caso, la expresi√≥n se escribe como \(Double(multiplier) * 2.5) cuando se incluye dentro del literal de la cadena.

 Puede usar delimitadores de cadenas extendidos para crear cadenas que contengan caracteres que de otro modo se tratar√≠an como una interpolaci√≥n de cadenas. Por ejemplo:
 */

print(#"Write an interpolated string in Swift using \(multiplier)."#)
// Prints "Write an interpolated string in Swift using \(multiplier)."

/*
 Para usar la interpolaci√≥n de cadenas dentro de una cadena que usa delimitadores extendidos, haga coincidir el n√∫mero de signos num√©ricos despu√©s de la barra invertida con el n√∫mero de signos num√©ricos al principio y al final de la cadena. Por ejemplo:
 */

print(#"6 times 7 is \#(6 * 7)."#)
// Prints "6 times 7 is 42."


//*********************************************************************//
// Ntotas:                                                             //
//*********************************************************************//
//                                                                     //
// Las expresiones que escribes entre par√©ntesis dentro de una cadena  //
// interpolada no pueden contener una barra invertida sin escape (\),  //
// un retorno de carro o un feed de l√≠nea. Sin embargo, pueden         //
// contener otros literales de cadena.                                 //
//*********************************************************************//

/*
 Unicode:
 -------
 
 Unicode es un est√°ndar internacional para codificar, representar y procesar texto en diferentes sistemas de escritura. Le permite representar casi cualquier car√°cter de cualquier idioma en una forma estandarizada, y leer y escribir esos caracteres hacia y desde una fuente externa, como un archivo de texto o una p√°gina web. Los tipos de cadenas y caracteres de Swift son totalmente compatibles con Unicode, como se describe en esta secci√≥n.

 Valores escalares Unicode:
 -------------------------
 
 Detr√°s de escena, el tipo de cadena nativo de Swift se construye a partir de valores escalares Unicode. Un valor escalar Unicode es un n√∫mero √∫nico de 21 bits para un car√°cter o modificador, como U+0061 para LA LETRA MIN√öSCULA LATINA A ("a"), o U+1F425 para FRONT-FACING BABY CHICK ("üê•").

 Tenga en cuenta que no todos los valores escalares Unicode de 21 bits est√°n asignados a un car√°cter; algunos escalares est√°n reservados para asignaci√≥n futura o para su uso en la codificaci√≥n UTF-16. Los valores escalares que se han asignado a un car√°cter generalmente tambi√©n tienen un nombre, como la LETRA MIN√öSCULA LATINA A y el POLLITO FRONTAL en los ejemplos anteriores.

 Grupos de grafema extendidos:
 ----------------------------
 
 Cada instancia del tipo de car√°cter de Swift representa un √∫nico grupo de grafemas extendido. Un grupo de grafemas extendido es una secuencia de uno o m√°s escalares Unicode que (cuando se combinan) producen un solo car√°cter legible por humanos.

 He aqu√≠ un ejemplo. La letra √© se puede representar como el √∫nico escalar Unicode √© (LETRA MIN√öSCULA LATINA E CON AGUDO, o U+00E9). Sin embargo, la misma letra tambi√©n se puede representar como un par de escalares: una letra est√°ndar e (LETRA MIN√öSCULA LATINA E, o U+0065), seguida del escalar COMBINADO DE ACENTO AGUDO (U+0301). El escalar COMBINING ACUTE ACCENT se aplica gr√°ficamente al escalar que lo precede, convirtiendo una e en una √© cuando se representa mediante un sistema de representaci√≥n de texto con tecnolog√≠a Unicode.

 En ambos casos, la letra √© se representa como un solo valor de car√°cter Swift que representa un grupo de grafemas extendido. En el primer caso, el cl√∫ster contiene un solo escalar; en el segundo caso, es un grupo de dos escalares:
 */

let eAcute: Character = "\u{E9}"                         // √©
let combinedEAcute: Character = "\u{65}\u{301}"          // e followed by
// eAcute is √©, combinedEAcute is eÃÅ

/*
 Los cl√∫steres de grafemas extendidos son una forma flexible de representar muchos caracteres de escritura complejos como un solo valor de car√°cter. Por ejemplo, las s√≠labas Hangul del alfabeto coreano se pueden representar como una secuencia precompuesta o descompuesta. Ambas representaciones califican como un solo valor de car√°cter en Swift:
*/

let precomposed: Character = "\u{D55C}"                  // Ìïú
let decomposed: Character = "\u{1112}\u{1161}\u{11AB}"   // ·Ñí, ·Ö°, ·Ü´
// precomposed is Ìïú, decomposed is ·Ñí·Ö°·Ü´

/*
 Los cl√∫steres de grafemas extendidos permiten escalares para encerrar marcas (como COMBINAR C√çRCULO DE CIERRE o U+20DD) para encerrar otros escalares Unicode como parte de un solo valor de car√°cter:
 */

let enclosedEAcute: Character = "\u{E9}\u{20DD}"
// enclosedEAcute is √©‚Éù

/*
 Los escalares Unicode para los s√≠mbolos indicadores regionales se pueden combinar en pares para crear un solo valor de car√°cter, como esta combinaci√≥n de LETRA DEL S√çMBOLO DEL INDICADOR REGIONAL U (U+1F1FA) y LA LETRA DEL S√çMBOLO DEL INDICADOR REGIONAL S (U+1F1F8):
 */


let regionalIndicatorForUS: Character = "\u{1F1FA}\u{1F1F8}"
// regionalIndicatorForUS is üá∫üá∏

/*
 Conteo de personajes:
 --------------------
 
 Para recuperar un recuento de los valores de caracteres en una cadena, use la propiedad de recuento de la cadena:
 */

let unusualMenagerie = "Koala üê®, Snail üêå, Penguin üêß, Dromedary üê™"
print("unusualMenagerie has \(unusualMenagerie.count) characters")
// Prints "unusualMenagerie has 40 characters"

/*
 Tenga en cuenta que el uso de Swift de cl√∫steres de grafemas extendidos para los valores de caracteres significa que la concatenaci√≥n y modificaci√≥n de cadenas no siempre pueden afectar el recuento de caracteres de una cadena.

 Por ejemplo, si inicializa una nueva cadena con el caf√© de palabras de cuatro caracteres, y luego agrega un ACENTO AGUDO COMBINADO (U+0301) al final de la cadena, la cadena resultante todav√≠a tendr√° un recuento de caracteres de 4, con un cuarto car√°cter de √©, no e:
 */


var word = "cafe"
print("the number of characters in \(word) is \(word.count)")
// Prints "the number of characters in cafe is 4"


word += "\u{301}"    // COMBINING ACUTE ACCENT, U+0301


print("the number of characters in \(word) is \(word.count)")
// Prints "the number of characters in cafeÃÅ is 4"


//*********************************************************************//
// Ntotas:                                                             //
//*********************************************************************//
// Los grupos de grafemas extendidos pueden estar compuestos por       //
// m√∫ltiples escalares Unicode. Esto significa que diferentes          //
// caracteres, y diferentes representaciones del mismo car√°cter,       //
// pueden requerir diferentes cantidades de memoria para almacenar.    //
// Debido a esto, los caracteres en Swift no ocupan la misma cantidad  //
// de memoria dentro de la representaci√≥n de una cadena.               //
// Como resultado, el n√∫mero de caracteres en una cadena no se puede   //
// calcular sin iterar a trav√©s de la cadena para determinar sus       //
// l√≠mites de grupo de grafemas extendidos. Si est√° trabajando con     //
// valores de cadena particularmente largos, tenga en cuenta que la    //
// propiedad de recuento debe iterar sobre los escalares Unicode en    //
// toda la cadena para determinar los caracteres de esa cadena.        //
//                                                                     //
// El recuento de caracteres devueltos por la propiedad count no       //
// siempre es el mismo que la propiedad length de un NSString que      //
// contiene los mismos caracteres. La longitud de una NSString se basa //
// en el n√∫mero de unidades de c√≥digo de 16 bits dentro de la          //
// representaci√≥n UTF-16 de la cadena y no en el n√∫mero de cl√∫steres   //
// de grafemas extendidos Unicode dentro de la cadena.                 //
//*********************************************************************//

/*
 Acceso y modificaci√≥n de una cadena:
 -----------------------------------
 
 Se accede y se modifica una cadena a trav√©s de sus m√©todos y propiedades, o mediante el uso de la sintaxis de sub√≠ndices.

 
 √çndices de cadena:
 -----------------
 
 Cada valor de cadena tiene un tipo de √≠ndice asociado, String.Index, que corresponde a la posici√≥n de cada car√°cter en la cadena.

 Como se mencion√≥ anteriormente, los diferentes caracteres pueden requerir diferentes cantidades de memoria para almacenar, por lo que para determinar qu√© car√°cter est√° en una posici√≥n particular, debe iterar sobre cada escalar Unicode desde el principio o el final de esa cadena. Por esta raz√≥n, las cadenas Swift no se pueden indexar por valores enteros.

 Utilice la propiedad startIndex para acceder a la posici√≥n del primer car√°cter de una cadena. La propiedad endIndex es la posici√≥n despu√©s del √∫ltimo car√°cter en una cadena. Como resultado, la propiedad endIndex no es un argumento v√°lido para el sub√≠ndice de una cadena. Si una cadena est√° vac√≠a, startIndex y endIndex son iguales.

 Accedes a los √≠ndices antes y despu√©s de un √≠ndice dado utilizando los m√©todos index(before:) e index(after:) de String. Para acceder a un √≠ndice m√°s alejado del √≠ndice dado, puede usar el m√©todo index(_:offsetBy:) en lugar de llamar a uno de estos m√©todos varias veces.

 Puede usar la sintaxis de sub√≠ndices para acceder al car√°cter en un √≠ndice de cadena en particular.
 */

let greeting = "Guten Tag!"
greeting[greeting.startIndex]
// G
greeting[greeting.index(before: greeting.endIndex)]
// !
greeting[greeting.index(after: greeting.startIndex)]
// u
let index = greeting.index(greeting.startIndex, offsetBy: 7)
greeting[index]
// a

/*
 Intentar acceder a un √≠ndice fuera del rango de una cadena o a un car√°cter en un √≠ndice fuera del rango de una cadena desencadenar√° un error de tiempo de ejecuci√≥n.
 */

greeting[greeting.endIndex] // Error
greeting.index(after: greeting.endIndex) // Error

// Utilice la propiedad de √≠ndices para acceder a todos los √≠ndices de caracteres individuales en una cadena.

for index in greeting.indices {
    print("\(greeting[index]) ", terminator: "")
}
// Prints "G u t e n   T a g ! "


//*********************************************************************//
// Ntotas:                                                             //
//*********************************************************************//
// Puede usar las propiedades startIndex y endIndex y los m√©todos      //
// index(before:), index(after:) e index(_:offsetBy:) en cualquier     //
// tipo que se ajuste al protocolo Collection. Esto incluye String,    //
// como se muestra aqu√≠, as√≠ como tipos de colecci√≥n como Array,       //
// Dictionary y Set.                                                   //
//*********************************************************************//

/*
 Inserci√≥n y Extracci√≥n

 Para insertar un solo car√°cter en una cadena en un √≠ndice especificado, use el m√©todo insert(_:at:), y para insertar el contenido de otra cadena en un √≠ndice especificado, use el m√©todo insert(contentsOf:at:).
 */

var welcome = "hello"
welcome.insert("!", at: welcome.endIndex)
// welcome now equals "hello!"


welcome.insert(contentsOf: " there", at: welcome.index(before: welcome.endIndex))
// welcome now equals "hello there!"

/*
 Para eliminar un solo car√°cter de una cadena en un √≠ndice especificado, use el m√©todo remove(at:), y para eliminar una subcadena en un rango especificado, use el m√©todo removeSubrange(_:):
 */

welcome.remove(at: welcome.index(before: welcome.endIndex))
// welcome now equals "hello there"


let range = welcome.index(welcome.endIndex, offsetBy: -6)..<welcome.endIndex
welcome.removeSubrange(range)
// welcome now equals "hello"


//*********************************************************************//
// Ntotas:                                                             //
//*********************************************************************//
// Puede utilizar los m√©todos insert(_:at:), insert(contentsOf:at:),   //
// remove(at:) y removeSubrange(_:) en cualquier tipo que se ajuste al //
// protocolo RangeReplaceableCollection. Esto incluye String, como se  //
// muestra aqu√≠, as√≠ como tipos de colecci√≥n como Array,               //
// Dictionary y Set.                                                   //
// ********************************************************************//

/*
 Subcadenas:
 ----------

 Cuando obtienes una subcadena de una cadena, por ejemplo, usando un sub√≠ndice o un m√©todo como prefix(_:), el resultado es una instancia de Subcadena, no otra cadena. Las subcadenas en Swift tienen la mayor√≠a de los mismos m√©todos que las cadenas, lo que significa que puede trabajar con subcadenas de la misma manera que trabaja con cadenas. Sin embargo, a diferencia de las cadenas, utiliza subcadenas solo durante un corto per√≠odo de tiempo mientras realiza acciones en una cadena. Cuando est√© listo para almacenar el resultado durante m√°s tiempo, convierta la subcadena en una instancia de cadena. Por ejemplo:
 */

let greeting = "Hello, world!"
let index = greeting.firstIndex(of: ",") ?? greeting.endIndex
let beginning = greeting[..<index]
// beginning is "Hello"


// Convert the result to a String for long-term storage.
let newString = String(beginning)

/*
 Al igual que las cadenas, cada subcadena tiene una regi√≥n de memoria donde se almacenan los caracteres que componen la subcadena. La diferencia entre cadenas y subcadenas es que, como optimizaci√≥n del rendimiento, una subcadena puede reutilizar parte de la memoria que se utiliza para almacenar la cadena original, o parte de la memoria que se utiliza para almacenar otra subcadena. (Las cadenas tienen una optimizaci√≥n similar, pero si dos cadenas comparten memoria, son iguales). Esta optimizaci√≥n del rendimiento significa que no tiene que pagar el costo de rendimiento de copiar memoria hasta que modifique la cadena o la subcadena. Como se mencion√≥ anteriormente, las subcadenas no son adecuadas para el almacenamiento a largo plazo, debido a que reutilizan el almacenamiento de la cadena original, toda la cadena original debe mantenerse en la memoria mientras se est√© utilizando cualquiera de sus subcadenas.

 En el ejemplo anterior, el saludo es una cadena, lo que significa que tiene una regi√≥n de memoria donde se almacenan los caracteres que componen la cadena. Debido a que el comienzo es una subcadena de saludo, reutiliza la memoria que utiliza el saludo. Por el contrario, newString es una cadena; cuando se crea a partir de la subcadena, tiene su propio almacenamiento. La siguiente figura muestra estas relaciones:
 */

/*
              ______                    ___________________
             |String|----------------->|     Storage       |
              ------             ------|---> Hello, world! |
                                 |     |                   |
             -----------         |     |___________________|
            | Substring |________|
             -----------                ___________________
                  |                    |     Storage       |
                  |                    |                   |
                  |                    |      Hello        |
                  V                    |                   |
              --------                 |                   |
             | String |--------------->|___________________|
              --------
 
 |*********************************************************************|
 | Ntotas:                                                             |
 |*********************************************************************|
 | Tanto String como Substring se ajustan al protocolo StringProtocol, |
 | lo que significa que a menudo es conveniente para las funciones de  |
 | manipulaci√≥n de cadenas aceptar un valor StringProtocol.            |
 | Puede llamar a tales funciones con un valor de cadena o subcadena.  |
 |*********************************************************************|
 
 
 Comparaci√≥n de cadenas:
 ----------------------
 
 Swift proporciona tres formas de comparar valores textuales: igualdad de cadenas y caracteres, igualdad de prefijos e igualdad de sufijos.

 
 Igualdad de cadenas y caracteres:
 --------------------------------
 
 La igualdad de cadenas y caracteres se comprueba con el operador "igual a" (==) y el operador "no igual a" (! =), como se describe en Operadores de Comparaci√≥n:
 
 */

let quotation = "We're a lot alike, you and I."
let sameQuotation = "We're a lot alike, you and I."
if quotation == sameQuotation {
    print("These two strings are considered equal")
}
// Prints "These two strings are considered equal"

/*
 Dos valores de cadena (o dos valores de caracteres) se consideran iguales si sus grupos de grafemas extendidos son can√≥nicamente equivalentes. Los grupos de grafemas extendidos son can√≥nicamente equivalentes si tienen el mismo significado y apariencia ling√º√≠stica, incluso si est√°n compuestos de diferentes escalares Unicode detr√°s de escena.

 Por ejemplo, LA LETRA MIN√öSCULA LATINA E CON AGUDA (U+00E9) es can√≥nicamente equivalente a LA LETRA MIN√öSCULA LATINA E (U+0065) seguida de COMBINACI√ìN DE ACENTO AGUDO (U+0301). Ambos grupos de grafemas extendidos son formas v√°lidas de representar el car√°cter √©, por lo que se consideran can√≥nicamente equivalentes:
 */


// "Voulez-vous un caf√©?" using LATIN SMALL LETTER E WITH ACUTE
let eAcuteQuestion = "Voulez-vous un caf\u{E9}?"


// "Voulez-vous un cafeÃÅ?" using LATIN SMALL LETTER E and COMBINING ACUTE ACCENT
let combinedEAcuteQuestion = "Voulez-vous un caf\u{65}\u{301}?"


if eAcuteQuestion == combinedEAcuteQuestion {
    print("These two strings are considered equal")
}
// Prints "These two strings are considered equal"

/*
 Por el contrario, la LETRA MAY√öSCULA LATINA A (U+0041, o "A"), como se usa en ingl√©s, no es equivalente a la LETRA MAY√öSCULA CIR√çLICA A (U+0410, o "–ê"), como se usa en ruso. Los caracteres son visualmente similares, pero no tienen el mismo significado ling√º√≠stico:
 */

let latinCapitalLetterA: Character = "\u{41}"


let cyrillicCapitalLetterA: Character = "\u{0410}"


if latinCapitalLetterA != cyrillicCapitalLetterA {
    print("These two characters aren't equivalent.")
}
// Prints "These two characters aren't equivalent."


/*
 |*********************************************************************|
 | Ntotas:                                                             |
 |*********************************************************************|
 |Las comparaciones de cadenas y caracteres en Swift no son sensibles a|
 | la configuraci√≥n regional.                                          |
 |*********************************************************************|
 
 
 Igualdad de prefijo y sufijo:
 ----------------------------
 
 Para comprobar si una cadena tiene un prefijo o sufijo de cadena particular, llame a los m√©todos hasPrefix(_:) y hasSuffix(_:) de la cadena, los cuales toman un solo argumento de tipo String y devuelven un valor booleano.

 Los siguientes ejemplos consideran una serie de cuerdas que representan las ubicaciones de la escena de los dos primeros actos de Romeo y Julieta de Shakespeare:
 */

let romeoAndJuliet = [
    "Act 1 Scene 1: Verona, A public place",
    "Act 1 Scene 2: Capulet's mansion",
    "Act 1 Scene 3: A room in Capulet's mansion",
    "Act 1 Scene 4: A street outside Capulet's mansion",
    "Act 1 Scene 5: The Great Hall in Capulet's mansion",
    "Act 2 Scene 1: Outside Capulet's mansion",
    "Act 2 Scene 2: Capulet's orchard",
    "Act 2 Scene 3: Outside Friar Lawrence's cell",
    "Act 2 Scene 4: A street in Verona",
    "Act 2 Scene 5: Capulet's mansion",
    "Act 2 Scene 6: Friar Lawrence's cell"
]

/*
 Puedes usar el m√©todo hasPrefix(_:) con la matriz romeoAndJuliet para contar el n√∫mero de escenas en el Acto 1 de la obra:
 */

var act1SceneCount = 0
for scene in romeoAndJuliet {
    if scene.hasPrefix("Act 1 ") {
        act1SceneCount += 1
    }
}
print("There are \(act1SceneCount) scenes in Act 1")
// Prints "There are 5 scenes in Act 1"


/*
 Del mismo modo, use el m√©todo hasSuffix(_:) para contar el n√∫mero de escenas que tienen lugar en o alrededor de la mansi√≥n de Capuleto y la celda de Fray Lawrence:
 */

var mansionCount = 0
var cellCount = 0
for scene in romeoAndJuliet {
    if scene.hasSuffix("Capulet's mansion") {
        mansionCount += 1
    } else if scene.hasSuffix("Friar Lawrence's cell") {
        cellCount += 1
    }
}
print("\(mansionCount) mansion scenes; \(cellCount) cell scenes")
// Prints "6 mansion scenes; 2 cell scenes"


/*
 |*********************************************************************|
 | Ntotas:                                                             |
 |*********************************************************************|
 | Los m√©todos hasPrefix(_:) y hasSuffix(_:) realizan una comparaci√≥n  |
 | de equivalencia can√≥nica car√°cter por car√°cter entre los grupos de  |
 | grafemas extendidos en cada cadena, como se describe en String and  |
 | Character Equality.                                                 |
 |*********************************************************************|
 
 
 Representaciones Unicode de cadenas:
 -----------------------------------
 
 Cuando se escribe una cadena Unicode en un archivo de texto o en alg√∫n otro almacenamiento, los escalares Unicode en esa cadena se codifican en una de varias formas de codificaci√≥n definidas por Unicode. Cada forma codifica la cadena en peque√±os trozos conocidos como unidades de c√≥digo. Estos incluyen la forma de codificaci√≥n UTF-8 (que codifica una cadena como unidades de c√≥digo de 8 bits), la forma de codificaci√≥n UTF-16 (que codifica una cadena como unidades de c√≥digo de 16 bits) y la forma de codificaci√≥n UTF-32 (que codifica una cadena como unidades de c√≥digo de 32 bits).

 Swift proporciona varias formas diferentes de acceder a representaciones Unicode de cadenas. Puede iterar sobre la cadena con una declaraci√≥n for-in, para acceder a sus valores de caracteres individuales como grupos de grafemas extendidos Unicode. Este proceso se describe en Trabajar con personajes.

 Alternativamente, acceda a un valor de cadena en una de las otras tres representaciones compatibles con Unicode:

 Una colecci√≥n de unidades de c√≥digo UTF-8 (accesida con la propiedad utf8 de la cadena)

 Una colecci√≥n de unidades de c√≥digo UTF-16 (accesida con la propiedad utf16 de la cadena)

 Una colecci√≥n de valores escalares Unicode de 21 bits, equivalentes a la forma de codificaci√≥n UTF-32 de la cadena (accesida con la propiedad unicodeScalars de la cadena)

 Cada ejemplo a continuaci√≥n muestra una representaci√≥n diferente de la siguiente cadena, que se compone de los caracteres D, o, g, !! (MARCA DE EXCLAMACI√ìN DOBLE, o escalar Unicode U+203C), y el car√°cter üê∂ (CARA DE PERRO, o escalar Unicode U+1F436):
 */

let dogString = "Dog‚Äºüê∂"

/*
 Representaci√≥n UTF-8

 Puede acceder a una representaci√≥n UTF-8 de una cadena iterando sobre su propiedad utf8. Esta propiedad es de tipo String.UTF8View, que es una colecci√≥n de valores de 8 bits (UInt8) sin signo, uno para cada byte en la representaci√≥n UTF-8 de la cadena:
 
 |***************************************************************************************************|
 |          |    D   |    o   |    g   |             !!              |               üê∂              |
 | charxter | U+0044 | U+006F | U+0067 |           U+203c            |            U+1F436            |
 |          |        |        |        |                             |                               |
 |*******************************************************************|*******************************|
 |          |        |        |        |        |          |         |       |       |       |       |
 | UTF-8    |   68   |   111  |  103   |   226  |   128    |  188    |  240  |  159  |  144  |  182  |
 |          |        |        |        |        |          |         |       |       |       |       |
 |**********|********|********|********|********|**********|*********|*******|*******|*******|*******|
 |          |        |        |        |        |          |         |       |       |       |       |
 | Position |   0    |    1   |   2    |   3    |    4     |    5    |   6   |   7   |   8   |   9   |
 |          |        |        |        |        |          |         |       |       |       |       |
 |***************************************************************************************************|
 
 */

for codeUnit in dogString.utf8 {
    print("\(codeUnit) ", terminator: "")
}
print("")
// Prints "68 111 103 226 128 188 240 159 144 182 "


/*
 En el ejemplo anterior, los tres primeros valores decimales de codeUnit (68, 111, 103) representan los caracteres D, o y g, cuya representaci√≥n UTF-8 es la misma que su representaci√≥n ASCII. Los siguientes tres valores decimales de la unidad de c√≥digo (226, 128, 188) son una representaci√≥n UTF-8 de tres bytes del car√°cter DOUBLE EXCLAMATION MARK. Los √∫ltimos cuatro valores de codeUnit (240, 159, 144, 182) son una representaci√≥n UTF-8 de cuatro bytes del car√°cter DOG FACE.

 Representaci√≥n UTF-16

 Puede acceder a una representaci√≥n UTF-16 de una cadena iterando sobre su propiedad utf16. Esta propiedad es de tipo String.UTF16View, que es una colecci√≥n de valores de 16 bits sin signo (UInt16), uno para cada unidad de c√≥digo de 16 bits en la representaci√≥n UTF-16 de la cadena:
 
 
 |*******************************************************************|
 |          |    D   |    o   |    g   |   !!   |         üê∂         |
 | charxter | U+0044 | U+006F | U+0067 | U+203c |      U+1F436       |
 |          |        |        |        |        |                    |
 |*******************************************************************|
 |          |        |        |        |        |          |         |
 |  UTF-16  |   68   |   111  |  103   |  8252  |  55357   | 56374   |
 |code Unit |        |        |        |        |          |         |
 |**********|********|********|********|********|**********|*********|
 |          |        |        |        |        |          |         |
 | Position |   0    |    1   |   2    |   3    |    4     |    5    |
 |          |        |        |        |        |          |         |
 |*******************************************************************|
 
 */

for codeUnit in dogString.utf16 {
    print("\(codeUnit) ", terminator: "")
}
print("")
// Prints "68 111 103 8252 55357 56374 "


/*
 Una vez m√°s, los tres primeros valores de codeUnit (68, 111, 103) representan los caracteres D, o y g, cuyas unidades de c√≥digo UTF-16 tienen los mismos valores que en la representaci√≥n UTF-8 de la cadena (porque estos escalares Unicode representan caracteres ASCII).

 El cuarto valor de codeUnit (8252) es un equivalente decimal del valor hexadecimal 203C, que representa el escalar Unicode U+203C para el car√°cter DOUBLE EXCLAMATION MARK. Este car√°cter se puede representar como una sola unidad de c√≥digo en UTF-16.

 Los valores quinto y sexto codeUnit (55357 y 56374) son una representaci√≥n de par sustituto UTF-16 del car√°cter DOG FACE. Estos valores son un valor sustituto alto de U+D83D (valor decimal 55357) y un valor sustituto bajo de U+DC36 (valor decimal 56374).

 
 Representaci√≥n escalar Unicode:
 ------------------------------
 
 Puede acceder a una representaci√≥n escalar Unicode de un valor de cadena iterando sobre su propiedad unicodeScalars. Esta propiedad es de tipo UnicodeScalarView, que es una colecci√≥n de valores de tipo UnicodeScalar.

 Cada UnicodeScalar tiene una propiedad de valor que devuelve el valor de 21 bits del escalar, representado dentro de un valor UInt32:
 
 
 |*********************************************************|
 |          |    D   |    o   |    g   |   !!   |    üê∂    |
 | charxter | U+0044 | U+006F | U+0067 | U+203c | U+1F436  |
 |          |        |        |        |        |          |
 |*********************************************************|
 | Unicode  |        |        |        |        |          |
 |  scale   |   68   |   111  |  103   |  8252  |  128054  |
 |code Unit |        |        |        |        |          |
 |**********|********|********|********|********|**********|
 |          |        |        |        |        |          |
 | Position |   0    |    1   |   2    |   3    |    4     |
 |          |        |        |        |        |          |
 |*********************************************************|
 */

for scalar in dogString.unicodeScalars {
    print("\(scalar.value) ", terminator: "")
}
print("")
// Prints "68 111 103 8252 128054 "

/*
 Las propiedades de valor para los tres primeros valores UnicodeScalar (68, 111, 103) representan una vez m√°s los caracteres D, o y g.

 El cuarto valor de codeUnit (8252) es de nuevo un equivalente decimal del valor hexadecimal 203C, que representa el escalar Unicode U+203C para el car√°cter DOUBLE EXCLAMATION MARK.

 La propiedad de valor del quinto y √∫ltimo UnicodeScalar, 128054, es un equivalente decimal del valor hexadecimal 1F436, que representa el escalar Unicode U+1F436 para el car√°cter DOG FACE.

 Como alternativa a consultar sus propiedades de valor, cada valor de UnicodeScalar tambi√©n se puede usar para construir un nuevo valor de cadena, como con la interpolaci√≥n de cadenas:
 */


for scalar in dogString.unicodeScalars {
    print("\(scalar) ")
}
// D
// o
// g
// ‚Äº
// üê∂


